#version 450
#extension GL_GOOGLE_include_directive : require

//
// 2xMSAA checkerboard resolve
//

layout(binding = 0) uniform sampler2DMS u_texColor;
layout(binding = 1, rgba8) uniform writeonly image2D u_texResolved;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#define LEFT 0
#define UP 1
#define RIGHT 2
#define DOWN 3

float diffBlend(vec3 a, vec3 b) {
	vec3 diff = a - b;
	float len = sqrt(dot(diff, diff));
	return 1.0f / (len + 0.001f);
}

const float gamma = 2.2;

vec3 srgbToLinear(vec3 v) {
	return pow(v, vec3(gamma));
}

vec3 linearToSRGB(vec3 v) {
	return pow(v, vec3(1.0 / gamma));
}

void main() {
	const uint row = gl_GlobalInvocationID.y & 1;
	const int s0 = int(row);
	const int s1 = 1 - s0;

	const ivec2 msaaPos = ivec2(gl_GlobalInvocationID.xy / uvec2(1, 2));

	vec3 colors[4];

	if (row == 0) {
		// Even row
		colors[LEFT]  = texelFetch(u_texColor, msaaPos + ivec2(0, 0), 1).rgb;
		colors[DOWN]  = texelFetch(u_texColor, msaaPos + ivec2(0, 0), 0).rgb;
		colors[RIGHT] = texelFetch(u_texColor, msaaPos + ivec2(1, 0), 1).rgb;
		colors[UP]    = texelFetch(u_texColor, msaaPos - ivec2(0, 1), 0).rgb;
	} else {
		// Odd row
		colors[LEFT]  = texelFetch(u_texColor, msaaPos - ivec2(1, 0), 0).rgb;
		colors[DOWN]  = texelFetch(u_texColor, msaaPos + ivec2(0, 1), 1).rgb;
		colors[RIGHT] = texelFetch(u_texColor, msaaPos + ivec2(0, 0), 0).rgb;
		colors[UP]    = texelFetch(u_texColor, msaaPos + ivec2(0, 0), 1).rgb;
	}

	const float diffWeight[2] = {
		diffBlend(colors[LEFT], colors[RIGHT]),
		diffBlend(colors[UP],   colors[DOWN]),
	};

	const float totalWeight = diffWeight[0] * 2 + diffWeight[1] * 2;

	//vec3 filteredCol = (colors[0] + colors[1] + colors[2] + colors[3]) / vec3(4.0);
	vec3 filteredCol = (
		colors[LEFT]  * diffWeight[0] +
		colors[RIGHT] * diffWeight[0] +
		colors[UP]    * diffWeight[1] +
		colors[DOWN]  * diffWeight[1]
	) / totalWeight;

	vec3 passthruCol = texelFetch(u_texColor, ivec2(gl_GlobalInvocationID.xy / uvec2(1, 2)), s1).rgb;

	const ivec2 filteredPos = ivec2(gl_GlobalInvocationID.xy * uvec2(2, 1) + uvec2(s1, 0));
	const ivec2 passthruPos = ivec2(gl_GlobalInvocationID.xy * uvec2(2, 1) + uvec2(s0, 0));

	imageStore(u_texResolved, filteredPos, vec4(linearToSRGB(filteredCol), 0));
	imageStore(u_texResolved, passthruPos, vec4(linearToSRGB(passthruCol), 0));
}
